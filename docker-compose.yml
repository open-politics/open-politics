services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - PGPORT=${POSTGRES_PORT}

  # adminer:
  #   image: adminer
  #   restart: always
  #   networks:
  #     - traefik-public
  #     - default
  #   depends_on:
  #     - db
  #   environment:
  #     - ADMINER_DESIGN=pepa-linha-dark
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.constraint-label=traefik-public
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
  #     - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
      - traefik-public
      - opol-app-stack
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=traefik-public
    #   - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
    #   - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://www\.(.*)
    #   - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://$${1}
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
    command: /start-reload.sh

  # redis:
  #   image: redis:alpine
  #   ports:
  #     - '6380:6380'
  #   volumes:
  #     - redis_data:/data
  #     - ./misc/redis.conf:/usr/local/etc/redis/redis.conf
  #   command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
  #   networks:
  #     - default
  #     - traefik-public

  # searxng:
  #   image: searxng/searxng
  #   ports:
  #     - '${SEARXNG_PORT:-8060}:8080'
  #   networks:
  #     - default
  #     - traefik-public
  #     - opol-app-stack
  #   volumes:
  #     - ./searxng-limiter.toml:/etc/searxng/limiter.toml
  #     - ./searxng-settings.yml:/etc/searxng/settings.yml
  #     - searxng_data:/data

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://api.${DOMAIN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - USE_LOCAL_REDIS=true
      - LOCAL_REDIS_URL=${LOCAL_REDIS_URL}
      - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
      - SEARXNG_API_URL=${SEARXNG_API_URL}
      - SEARCH_API=${SEARCH_API}
      - SEARXNG_SECRET=${SEARXNG_SECRET}
      - SEARXNG_PORT=${SEARXNG_PORT}
      - SEARXNG_BIND_ADDRESS=${SEARXNG_BIND_ADDRESS}
      - SEARXNG_IMAGE_PROXY=${SEARXNG_IMAGE_PROXY}
      - SEARXNG_LIMITER=${SEARXNG_LIMITER}
      - SEARXNG_DEFAULT_DEPTH=${SEARXNG_DEFAULT_DEPTH}
      - SEARXNG_MAX_RESULTS=${SEARXNG_MAX_RESULTS}
      - SEARXNG_ENGINES=${SEARXNG_ENGINES}
      - SEARXNG_TIME_RANGE=${SEARXNG_TIME_RANGE}
      - SEARXNG_SAFESEARCH=${SEARXNG_SAFESEARCH}
    networks:
      - default
      - traefik-public
      - opol-app-stack
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=traefik-public
    #   - traefik.constraint-label=traefik-public

    #   - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=3000

    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`)
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`)
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le

    #   - traefik.http.middlewares.${STACK_NAME?Variable not set}-frontend-www-redirect.redirectregex.regex=^https?://www\.(.*)
    #   - traefik.http.middlewares.${STACK_NAME?Variable not set}-frontend-www-redirect.redirectregex.replacement=https://$${1}
    #   - traefik.http.middlewares.${STACK_NAME?Variable not set}-frontend-www-redirect.redirectregex.permanent=true

    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-frontend-www-redirect
    #   - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-frontend-www-redirect

volumes:
  app-db-data:
  redis_data:
  searxng_data:

networks:
  default:
    external: false
  traefik-public:
    external: true
  opol-app-stack:
    external: true
